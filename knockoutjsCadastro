<html>
<head>
  <meta http-equiv="content-type" content="text/html; charset=UTF-8">
  <title>Knockout Exemplo de cadastro</title>
  
  
  <script type='text/javascript' src='//code.jquery.com/jquery-1.8.3.js'></script>
  <script type='text/javascript' src="http://knockoutjs.com/downloads/knockout-2.2.0.js"></script>
    
  
  <style type='text/css'>
    p {
    margin-bottom: .5em;
}
  </style>
  
<script type='text/javascript'>//<![CDATA[
$(window).load(function(){
var CrudModel = function(data) {
    data = data || {};

    this.firstName = ko.observable();
    this.lastName = ko.observable();
    this.email = ko.observable();

    this.initialize(data);
    this.initialize.originalData = ko.observable(data); // observable just so we can see in JSON output
    
    // after init, so that it's not recomputed twice
    this.fullName = ko.computed(this.getFullName, this);
}


ko.utils.extend(CrudModel.prototype, {
    getFullName: function() {
        return this.firstName() + " " + this.lastName();
    },
    initialize: function(data) {
        this.firstName(data.firstName);
        this.lastName(data.lastName);
        this.email(data.email);
    },
    revert: function() {
        this.initialize(this.initialize.originalData());
    },
    save: function() {
        this.initialize.originalData(ko.toJS(this));  
//Note: fullName now appears in the "originalData", which is harmless.  However, we could delete fullName from the result of ko.toJS(this) or we could "hide" fullName as a sub-observable.
    }
});

var model = new CrudModel({
    firstName: "Ben",
    lastName: "Foster",
    email: "a@b.com"
});
ko.applyBindings(model);
});//]]> 

</script>

</head>
<body>
  <p>
    <label>Primeiro Nome</label> <input data-bind="value: firstName"/>
</p>
<p>
    <label>Ãºltimo Nome</label> <input data-bind="value: lastName"/>
</p>
<p>
    <label>Email</label> <input data-bind="value: email"/>
</p>
<p>
<button data-bind="click: save">Salvar</button> <button data-bind="click: revert">Deletar</button>
</p>

<pre data-bind="text: ko.toJSON($root, null, 2)"></pre>
original
<pre data-bind="text: ko.toJSON(initialize.originalData, null, 2)"></pre>

  
</body>

</html>

import urllib2
import ssl
from suds.client import Client

from suds import transport
import sys


URL_PROXIES = {'ftp': 'http://*****.******.net:8080', 'http': 'http://***.*****:8080', 'https': 'https://******.****.net:8443'}


def main():

    response_xml = None
    t = HTTPSUnVerifiedCertTransportCustom(use_proxy = True, protocol = ssl.PROTOCOL_TLSv1_2)

    try:


        url = 'https://services.google.com.br/PostTradeOPB/bmf.asmx?WSDL'   # current production  -  OK works fine
        #url = 'https://postrade-uat.google.com.br/PostTradeOPB/bmf.asmx?WSDL'  # new UAT -- does not work

        c = Client(url,  transport=t)

        response_xml = c.service.QueryTradesStr('', '**** password here ****','1', '2020-03-19', '2020-03-19', '2020-03-19T00:00:00', 'T')
        print 'response:',  str( response_xml )

    except ssl.SSLError as e:
        print
    except Exception as e:
        print str(e)
    except:
        print str(sys.exc_info())




class HTTPSUnVerifiedCertTransportCustom(transport.https.HttpAuthenticated):
    '''
    Creates a transport to use with the suds client, with optional parameters:
        use_proxy
          -   if the https web service is an internal/intranet server,  use_proxy = False

        protocol
           -  default = ssl.PROTOCOL_TLSv1_2 

    '''
    def __init__(self, use_proxy=True, protocol=ssl.PROTOCOL_TLSv1_2, *args, **kwargs):
        transport.https.HttpAuthenticated.__init__(self, *args, **kwargs)
        self.use_proxy = use_proxy
        self.protocol = protocol
    def u2handlers(self):
        '''
        return handlers for the new client
        '''
        handlers = []
        if self.use_proxy:
            handlers.append(urllib2.ProxyHandler(URL_PROXIES))

        handlers.append(urllib2.HTTPBasicAuthHandler(self.pm)) # python ssl Context support - PEP 0466
        if hasattr(ssl, '_create_unverified_context'):
            ssl_context = ssl._create_unverified_context(protocol=self.protocol)

            #ssl_context.set_ciphers( 'DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384'  )

            handlers.append(urllib2.HTTPSHandler(context=ssl_context))
        else:
            handlers.append(urllib2.HTTPSHandler())
        return handlers
